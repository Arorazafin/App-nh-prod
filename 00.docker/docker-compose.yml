version : '3.7'

services:
    app_web:
        build:
            context: ..
            dockerfile: 00.docker/Dockerfile
        container_name: app_web
        volumes:
            - ..:/project
        depends_on:
            - database_web
        networks:
            - app_network
        
        ##1)server flask
        command: tail -f /dev/null  # avoid exited code 0 - the conteneur always run for dev
        #command: python index.py
        ports:
            - "5000:5000"
        environment: 
            - PORT= 5000
            #- FLASK_DEBUG= 1
        
        ##2)server waitress
        #command: waitress-serve index:server
        #ports:
        #    - "8080:8080"
            
        ##3)server gunicorn
        #command: gunicorn app:server

    app_db:
        #build: .
        #image: python:3.8-slim-buster
        build:
            context: ..
            dockerfile: 00.docker/Dockerfile
        container_name: app_db
        volumes:
            - ..:/project
        depends_on: 
            - database_web
        networks:
            - app_network
        command: tail -f /dev/null
    
    
    database_web:
        image: postgres
        container_name: db_postgres
        restart: always
        environment:
            - POSTGRES_PASSWORD=nh
            - POSTGRES_DB=dbNH
        volumes:  # Ensure the duplicability of the database on the host folder (especially when dump)
            - ../01.database/data-sql/dbNH.sql:/docker-entrypoint-initdb.d/dbNH.sql
        networks:
            - app_network

    adminer:
        image: adminer
        restart: always
        container_name: db_adminer
        depends_on: 
            - database_web
        ports:
            - 8080:8080
        networks:
            - app_network


networks:      
    app_network:
        name: app_net
        driver: bridge


# docker exec -it app_web bash
# docker-compose exec app_web bash




